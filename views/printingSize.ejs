<!DOCTYPE html>
<html lang="th">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>การจัดการตาราง</title>
    <style>
        @page {
            size: 175mm 175mm;
            margin: 20px 20px 0px 20px;
        }

        @media print {
            * {
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
                -moz-print-color-adjust: exact;
            }

            tr:hover {
                background-color: transparent !important;
            }

            .no-print {
                display: none;
            }
        }

        .page {
            width: 100%;
            margin: 5px 0;
            page-break-after: always;
            font-size: small;
        }

        .header,
        .footer {
            width: 100%;
            text-align: right;
        }

        table {
            width: 80%;
            padding-left: 10%;
            border-collapse: collapse;
            font-size: small;
        }

        thead,
        tfoot {
            font-weight: bold;
            background-color: #b5d2e9;
        }

        th,
        td {
            padding: 0px;
            text-align: right;
            border-bottom: 1px solid rgb(212, 212, 212);
        }

        tfoot td {
            text-align: right;
        }

        tr:hover {
            background-color: #f5f5f5;
            cursor: pointer;
        }
    </style>
</head>

<body>
    <div id="" class="no-print">รายการต่อหน้า : <input id="perPage" class="form-control" style="width: 50px;"
            type="number" value="25"> <button onclick="changeEntriesPerPage();">เปลี่ยน</button></div>

    <div id="dataContainer" data-entries="<%= encodeURIComponent(JSON.stringify(entries)) %>"
        data-sale="<%= encodeURIComponent(JSON.stringify(sale)) %>"
        data-totalValues="<%= encodeURIComponent(JSON.stringify(totalValues)) %>"></div>

    <script>
        function addCommas(n) {
            return parseFloat(n).toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }

        function formatNumber(n) {
            return parseFloat(n).toFixed(2);
        }

        function createPageHeader(pageNum, totalPages, sale, textTitle, showPageNum = true) {
            return `
                <div class="header">
                    <span>${showPageNum ? `หน้าที่ ${pageNum}/${totalPages}` : ''}</span>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th style="text-align: center;">${textTitle}</th>
                            <th style="text-align: center;">วันที่ : ${new Date(sale.saleDate).toLocaleDateString('en-GB')}</th>
                            <th style="text-align: center;">คุณ : ${sale.customerID.customerName} ${sale.subCustomerID.subCustomerName ? `(${sale.subCustomerID.subCustomerName})` : ''}</th>
                        </tr>
                    </thead>
                </table><br>
            `;
        }

        function createEntriesTable(entries, code) {
            let filteredEntries = entries;
            if (code === '9' || code === '10') {
                filteredEntries = entries.filter(entry => entry.entryStatus === 'Y');
            }

            let lastBatchID = null; // เก็บ batchID ล่าสุดเพื่อตรวจสอบการเปลี่ยนแปลง
            let callHeadColumn = ''; // กำหนดค่าเริ่มต้นให้ callHeadColumn
            let totalSales = 0;
            let sizeTotalSales = 0;
            let sizeEntriesCount = 0;
            let sizeID = null; // เก็บ sizeID ล่าสุดเพื่อตรวจสอบการเปลี่ยนแปลง
            let rows = '';
            let lastCodeName = ''; // เก็บ codeName ล่าสุดเพื่อตรวจสอบการซ้ำ

            // กำหนด callHeadColumn ตามเงื่อนไขของ code
            if (code % 2 === 0) { // เลขคู่
                callHeadColumn = `
            <th style="text-align: left;">ชื่อไซส์</th>
            <th style="text-align: left;">เกรด</th>
            <th>ต้นทุน</th>
        `;
            } else { // เลขคี่
                callHeadColumn = `
            <th style="text-align: left;">ชื่อไซส์</th>
            <th style="text-align: left;"></th>
            <th></th>
        `;
            }

            filteredEntries.forEach(entry => {
                let borderStyle = '';
                if (entry.batchID._id !== lastBatchID) { // ตรวจสอบการเปลี่ยน batchID
                    if (lastBatchID !== null && code % 2 === 0) { // ถ้าไม่ใช่แถวแรก และ code เป็นเลขคู่ ให้เพิ่มเส้นแบบ double
                        borderStyle = 'border-top: double 1px black;';
                    }
                    lastBatchID = entry.batchID._id; // อัปเดต batchID ล่าสุด
                }

                // ตรวจสอบการเปลี่ยนแปลง sizeID
                if (entry.productID.sizeID._id !== sizeID) {
                    if (sizeID !== null) {
                        // ปิดตารางเก่าด้วย tfoot
                        rows += `
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="7" style="text-align: left;">รวม ${sizeEntriesCount} รายการ</td>
                            <td>${addCommas(formatNumber(sizeTotalSales))}</td>
                        </tr>
                    </tfoot>
                    </table><br>
                `;
                    }
                    // เริ่มตารางใหม่
                    sizeID = entry.productID.sizeID._id;
                    sizeTotalSales = 0;
                    sizeEntriesCount = 0;
                    rows += `
                <table>
                    <thead>
                        <tr>
                            ${callHeadColumn}
                            <th>น้ำหนัก(ก.)</th>
                            <th style="text-align: center;">x</th>
                            <th>ราคา(บาท)</th>
                            <th style="text-align: center;">=</th>
                            <th>รวม(บาท)</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
                }

                let callWeight = '';
                let callPrice = '';
                let callName = '';
                let callTotal = '';
                let originCode = entry.productID.typeID.originID.originCode;
                let heatCode = entry.productID.typeID.heatID.heatCode;
                let codeName = originCode + ' ' + heatCode;

                // ตรวจสอบ codeName ซ้ำ
                if (codeName === lastCodeName) {
                    codeName = '"';
                } else {
                    lastCodeName = codeName;
                }

                // กำหนด callName และ callWeight, callPrice, callTotal ตามเงื่อนไขของ code
                if (code === '7' || code === '8') {
                    callName = code === '7'
                        ? `<td style="text-align: left;">${entry.displayName} ${codeName}</td>
                   <td style="text-align: left;"></td>
                   <td></td>`
                        : `<td style="text-align: left;">${entry.productID.ber} ${entry.displayName} ${codeName}</td>
                   <td style="text-align: left;">${entry.productID.gradeID.gradeName}</td>
                   <td>${addCommas(entry.cost)}</td>`;

                    callWeight = entry.openWeight > 0
                        ? `<td style="text-align: right;">${addCommas(entry.openWeight)}</td>`
                        : `<td style="text-align: right;">0</td>`;

                    callPrice = entry.openPrice > 0
                        ? `<td style="text-align: right;">${addCommas(entry.openPrice)}</td>`
                        : `<td style="text-align: right;">0</td>`;

                    callTotal = `<td>${addCommas(entry.totalPreSale)}</td>`;
                    totalSales += entry.totalPreSale;
                    sizeTotalSales += entry.totalPreSale;

                } else if (code === '9' || code === '10') {
                    callName = code % 2 === 0
                        ? `<td style="text-align: left;">${entry.productID.ber} ${entry.displayName} ${codeName}</td>
                   <td style="text-align: left;">${entry.productID.gradeID.gradeName}</td>
                   <td>${addCommas(entry.cost)}</td>`
                        : `<td style="text-align: left;">${entry.displayName} ${codeName}</td>
                   <td style="text-align: left;"></td>
                   <td></td>`;

                    if (entry.closeWeight > 0) {
                        callWeight = `<td style="text-align: right;">${addCommas(entry.closeWeight)}</td>`;
                    } else {
                        callWeight = `<td style="text-align: right;">0</td>`;
                    }

                    if (entry.closePrice > 0) {
                        callPrice = `<td style="text-align: right;">${addCommas(entry.closePrice)}</td>`;
                    } else {
                        callPrice = `<td style="text-align: right;">0</td>`;
                    }

                    callTotal = `<td>${addCommas(entry.totalSale)}</td>`;
                    totalSales += entry.totalSale;
                    sizeTotalSales += entry.totalSale;

                } else if (code === '11' || code === '12') {
                    callName = code % 2 === 0
                        ? `<td style="text-align: left;">${entry.productID.ber} ${entry.displayName} ${codeName}</td>
                   <td style="text-align: left;">${entry.productID.gradeID.gradeName}</td>
                   <td>${addCommas(entry.cost)}</td>`
                        : `<td style="text-align: left;">${entry.displayName} ${codeName}</td>
                   <td style="text-align: left;"></td>
                   <td></td>`;

                    callWeight = entry.openWeight !== entry.closeWeight
                        ? `<td style="text-align: right;"><sub style="text-decoration: line-through; color: red;">${addCommas(entry.openWeight)}</sub> ${addCommas(entry.closeWeight)}</td>`
                        : `<td style="text-align: right;">${addCommas(entry.closeWeight)}</td>`;

                    callPrice = entry.openPrice !== entry.closePrice
                        ? `<td style="text-align: right;"><sub style="text-decoration: line-through; color: red;">${addCommas(entry.openPrice)}</sub> ${addCommas(entry.closePrice)}</td>`
                        : `<td style="text-align: right;">${addCommas(entry.closePrice)}</td>`;

                    callTotal = `<td>${addCommas(entry.totalSale)}</td>`;
                    totalSales += entry.totalSale;
                    sizeTotalSales += entry.totalSale;
                }

                rows += `
            <tr style="${borderStyle}">
                ${callName}
                ${callWeight}
                <td style="text-align: center;">x</td>
                ${callPrice}
                <td style="text-align: center;">=</td>
                ${callTotal}
            </tr>
        `;
                sizeEntriesCount++;
            });

            if (rows) {
                // ปิดตารางสุดท้ายด้วย tfoot
                rows += `
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="7" style="text-align: left;">รวม ${sizeEntriesCount} รายการ</td>
                            <td>${addCommas(formatNumber(sizeTotalSales))}</td>
                        </tr>
                    </tfoot>
                    </table>
                `;
            }

            return rows;
        }

        function createSizeSummaryTable(entries, sale, code) {
            let filteredEntries = entries;
            if (code === '9' || code === '10') {
                filteredEntries = entries.filter(entry => entry.entryStatus === 'Y');
            }

            let sizeSummary = {};
            filteredEntries.forEach(entry => {
                let sizeID = entry.productID.sizeID._id; // เปลี่ยนให้ใช้ _id ของ sizeID
                let sizeName = entry.productID.sizeID.sizeName; // เปลี่ยนให้ใช้ sizeName เป็น sizeName
                if (!sizeSummary[sizeID]) {
                    sizeSummary[sizeID] = {
                        sizeName: sizeName,
                        totalItems: 0,
                        totalSales: 0
                    };
                }
                sizeSummary[sizeID].totalItems += 1;
                sizeSummary[sizeID].totalSales += (code === '7' || code === '8') ? entry.totalPreSale : entry.totalSale; // ปรับให้ใช้ totalPreSale หรือ totalSale ตาม code
            });

            let grandTotalItems = 0;
            let grandTotalSales = 0;

            let rows = Object.values(sizeSummary).map(summary => {
                grandTotalItems += summary.totalItems;
                grandTotalSales += summary.totalSales;
                return `
            <tr>
                <td style="text-align: center;">${summary.sizeName}</td>
                <td style="text-align: center;">${summary.totalItems}</td>
                <td>${addCommas(formatNumber(summary.totalSales))}</td>
            </tr>
        `;
            }).join('');

            // คำนวณส่วนลดและจำนวนเงินหลังหักส่วนลด
            let discountAmount = code % 2 === 0 ? grandTotalSales * (sale.discount / 100) : 0;
            let finalAmount = grandTotalSales - discountAmount;

            // สร้าง showDiscount เฉพาะเมื่อ code เป็นเลขคู่
            let showDiscount = code % 2 === 0 ? `
        <tr>
            <td colspan="2" style="text-align: left;background-color: white;">หัก ${sale.discount}% เป็นเงิน ${addCommas(formatNumber(discountAmount))} บาท</td>
            <td style="background-color: white;">เหลือเงิน ${addCommas(formatNumber(finalAmount))} บาท</td>
        </tr>` : '';

            if (rows) {
                return `
                    <table>
                        <thead>
                            <tr>
                                <td style="text-align: center;">ชื่อไซส์</td>
                                <td style="text-align: center;">จำนวนรายการ</td>
                                <td>รวมราคา</td>
                            </tr>
                        </thead>
                        <tbody>
                            ${rows}
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="2" style="text-align: left;">ทั้งหมด ${Object.keys(sizeSummary).length} ไซส์ จำนวน ${grandTotalItems} รายการ</td>
                                <td>${addCommas(formatNumber(grandTotalSales))}</td>
                            </tr>
                            ${showDiscount}
                        </tfoot>
                    </table>
                `;
            }
            return '';
        }

        function createBatchSummaryTable(totalValues, sale, code) {
            let rows = '';
            let summaryRow = '';

            if (code === '7' || code === '8') {
                rows = totalValues.getTotalSumByBatch.map(batch => `
                    <tr>
                        <td style="text-align: left;">${batch.batchName}</td>
                        <td>${addCommas(formatNumber(batch.totalPreSumByBatch))}</td>
                        <td>${addCommas(formatNumber(batch.totalPreAfterDcByBatch))}</td>
                        <td>${addCommas(formatNumber(batch.totalPreCostByBatch))}</td>
                        <td>${addCommas(formatNumber(batch.totalPreProfitByBatch))}</td>
                    </tr>
                `).join('');

                summaryRow = `
                    <tr>
                        <td style="text-align: left;">รวม</td>
                        <td>${addCommas(totalValues.totalPreSaleSum)}</td>
                        <td>${addCommas(totalValues.totalPreSaleAfterDC)}</td>
                        <td>${addCommas(totalValues.totalPreSaleCost)}</td>
                        <td>${addCommas(totalValues.totalPreSaleProfit)}</td>
                    </tr>
                `;
            } else {
                rows = totalValues.getTotalSumByBatch.map(batch => `
                    <tr>
                        <td style="text-align: left;">${batch.batchName}</td>
                        <td>${addCommas(formatNumber(batch.totalSumByBatch))}</td>
                        <td>${addCommas(formatNumber(batch.totalAfterDcByBatch))}</td>
                        <td>${addCommas(formatNumber(batch.totalCostByBatch))}</td>
                        <td>${addCommas(formatNumber(batch.totalProfitByBatch))}</td>
                    </tr>
                `).join('');

                summaryRow = `
                    <tr>
                        <td style="text-align: left;">รวม</td>
                        <td>${addCommas(totalValues.totalSaleSum)}</td>
                        <td>${addCommas(totalValues.totalSaleAfterDC)}</td>
                        <td>${addCommas(totalValues.totalSaleCost)}</td>
                        <td>${addCommas(totalValues.totalSaleProfit)}</td>
                    </tr>
                `;
            }

            return `
                <table>
                    <thead>
                        <tr>
                            <th style="text-align: left;">ชุด</th>
                            <th>รวมขายได้(บาท)</th>
                            <th>หัก ${sale.discount}% เหลือ(บาท)</th>
                            <th>ต้นทุน(บาท)</th>
                            <th>กำไร(บาท)</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${rows}
                    </tbody>
                    <tfoot>
                        ${summaryRow}
                    </tfoot>
                </table>
            `;
        }

        function renderReceipts(entries, sale, totalValues, textTitle, code, entriesPerPage) {
            let container = document.getElementById('dataContainer');
            container.innerHTML = '';
            entriesPerPage = entriesPerPage || 25;
            let filteredEntries = entries;

            if (code === '9' || code === '10') {
                filteredEntries = entries.filter(entry => entry.entryStatus === 'Y');
            }

            let totalPages = Math.ceil(filteredEntries.length / entriesPerPage);
            let pagesSummary = [];

            // สร้างหน้าสรุปก่อน
            let sizeSummaryContent = createSizeSummaryTable(filteredEntries, sale, code);
            let batchSummaryContent = (code % 2 === 0) ? `<br>${createBatchSummaryTable(totalValues, sale, code)}` : '';
            if (sizeSummaryContent || batchSummaryContent) {
                let summaryContent = `
                    <div class="page">
                        ${createPageHeader(1, totalPages, sale, textTitle, false)} 
                        ${sizeSummaryContent}
                        ${batchSummaryContent}
                    </div>
                `;
                container.insertAdjacentHTML('beforeend', summaryContent);
            }

            // สร้างหน้าตารางข้อมูล
            for (let i = 0; i < totalPages; i++) {
                let pageEntries = filteredEntries.slice(i * entriesPerPage, (i + 1) * entriesPerPage);
                if (pageEntries.length > 0) {
                    let pageSummary = {
                        totalItems: pageEntries.length,
                        totalSale: (code === '7' || code === '8')
                            ? pageEntries.reduce((sum, entry) => sum + entry.totalPreSale, 0)
                            : pageEntries.reduce((sum, entry) => sum + entry.totalSale, 0)
                    };
                    pagesSummary.push(pageSummary);

                    let pageContent = `
                        <div class="page">
                            ${createPageHeader(i + 1, totalPages, sale, textTitle)}
                            ${createEntriesTable(pageEntries, code)}
                        </div>
                    `;
                    container.insertAdjacentHTML('beforeend', pageContent);
                }
            }
        }

        function changeEntriesPerPage() {
            let entriesPerPage = parseInt(document.getElementById('perPage').value, 10);
            let dataContainer = document.getElementById('dataContainer');
            let entries = JSON.parse(decodeURIComponent(dataContainer.getAttribute('data-entries')));
            let sale = JSON.parse(decodeURIComponent(dataContainer.getAttribute('data-sale')));
            let totalValues = JSON.parse(decodeURIComponent(dataContainer.getAttribute('data-totalValues')));
            let textTitle = document.title;
            let code = getQueryParam('code');

            renderReceipts(entries, sale, totalValues, textTitle, code, entriesPerPage);
        }

        function getQueryParam(param) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(param);
        }

        document.addEventListener('DOMContentLoaded', () => {
            let dataContainer = document.getElementById('dataContainer');
            let entries = JSON.parse(decodeURIComponent(dataContainer.getAttribute('data-entries')));
            let sale = JSON.parse(decodeURIComponent(dataContainer.getAttribute('data-sale')));
            let totalValues = JSON.parse(decodeURIComponent(dataContainer.getAttribute('data-totalValues')));

            let saleID = getQueryParam('id');
            let code = getQueryParam('code');
            let extraParam = getQueryParam('extraParam');
            let textTitle = '';

            if (extraParam) {
                if (code % 2 === 0) {
                    textTitle = `${extraParam} (สำหรับเรา)`;
                } else {
                    textTitle = `${extraParam}`;
                }
                document.title = textTitle;
            }

            renderReceipts(entries, sale, totalValues, textTitle, code, 25);
        });
    </script>
</body>

</html>
